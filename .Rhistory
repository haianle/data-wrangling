i == 1 ~ "DW_Staging.acu.CDPS_anle_full",
i ==2 ~ "DW_Staging.acu.CDPS_anle_PaidOnly",
i ==3 ~ "DW_Staging.acu.CDPS_anle_NoLab",
i ==4 ~ "DW_Staging.acu.CDPS_anle_PaidNoLab",
TRUE ~ "other")
clmtp <- gsub("DW_Staging.acu.CDPS_anle_","",tblname)
sqltxt <- paste0("select Bucket = case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end,
Score_anle = sum(a.RawScore), Score_Mllmn = sum(b.RawScore),
ScoreDiff = sum(a.RawScore - b.RawScore), MM = count(*)
from ", tblname, " as a
inner join dw_staging.acu.cdps_allcin_202201 as b
on a.Recipient_ID = b.MemberCIN
group by case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end;")
DataSQL <- sqlQuery(conn,sqltxt);
print(DataSQL)
knitr::kable(DataSQL, "pipe", caption = "Table 2" )
}
knitr::kable(DataSQL, "pipe", caption = "Table 2" )
cbind(ClaimType = clmtp, DataSQL)
df_total
df_total = data.frame()
for(i in 1:1){
tblname <- case_when(
i == 1 ~ "DW_Staging.acu.CDPS_anle_full",
i ==2 ~ "DW_Staging.acu.CDPS_anle_PaidOnly",
i ==3 ~ "DW_Staging.acu.CDPS_anle_NoLab",
i ==4 ~ "DW_Staging.acu.CDPS_anle_PaidNoLab",
TRUE ~ "other")
clmtp <- gsub("DW_Staging.acu.CDPS_anle_","",tblname)
sqltxt <- paste0("select
Bucket = case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end,
Score_anle = sum(a.RawScore), Score_Mllmn = sum(b.RawScore),
ScoreDiff = sum(a.RawScore - b.RawScore), MM = count(*)
from ", tblname, " as a
inner join dw_staging.acu.cdps_allcin_202201 as b
on a.Recipient_ID = b.MemberCIN
group by case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end;")
DataSQL <- sqlQuery(conn,sqltxt);
DataSQL <- cbind(ClaimType = clmtp, DataSQL)
df_total <- rbind(df_total, DataSQL)
}
cols <- c(2:5)
df_total[cols] <- lapply(df_total[cols], formatC, decimal.mark =",", format = "f", digits = 2)
knitr::kable(DataSQL, "pipe", caption = "Table 2" )
df_total
knitr::kable(df_total, "pipe", caption = "Table 2" )
df_total = data.frame()
for(i in 1:1){
tblname <- case_when(
i == 1 ~ "DW_Staging.acu.CDPS_anle_full",
i ==2 ~ "DW_Staging.acu.CDPS_anle_PaidOnly",
i ==3 ~ "DW_Staging.acu.CDPS_anle_NoLab",
i ==4 ~ "DW_Staging.acu.CDPS_anle_PaidNoLab",
TRUE ~ "other")
clmtp <- gsub("DW_Staging.acu.CDPS_anle_","",tblname)
sqltxt <- paste0("select
Bucket = case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end,
Score_anle = sum(a.RawScore), Score_Mllmn = sum(b.RawScore),
ScoreDiff = sum(a.RawScore - b.RawScore), MM = count(*)
from ", tblname, " as a
inner join dw_staging.acu.cdps_allcin_202201 as b
on a.Recipient_ID = b.MemberCIN
group by case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end;")
DataSQL <- sqlQuery(conn,sqltxt);
DataSQL <- cbind(ClaimType = clmtp, DataSQL)
df_total <- rbind(df_total, DataSQL)
}
cols <- c(2:5)
df_total[cols] <- lapply(df_total[cols], formatC, decimal.mark =".", format = "f", digits = 2)
knitr::kable(df_total, "pipe", caption = "Table 2" )
df_total = data.frame()
for(i in 1:1){
tblname <- case_when(
i == 1 ~ "DW_Staging.acu.CDPS_anle_full",
i ==2 ~ "DW_Staging.acu.CDPS_anle_PaidOnly",
i ==3 ~ "DW_Staging.acu.CDPS_anle_NoLab",
i ==4 ~ "DW_Staging.acu.CDPS_anle_PaidNoLab",
TRUE ~ "other")
clmtp <- gsub("DW_Staging.acu.CDPS_anle_","",tblname)
sqltxt <- paste0("select
Bucket = case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end,
Score_anle = sum(a.RawScore), Score_Mllmn = sum(b.RawScore),
ScoreDiff = sum(a.RawScore - b.RawScore), MM = count(*)
from ", tblname, " as a
inner join dw_staging.acu.cdps_allcin_202201 as b
on a.Recipient_ID = b.MemberCIN
group by case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end;")
DataSQL <- sqlQuery(conn,sqltxt);
DataSQL <- cbind(ClaimType = clmtp, DataSQL)
df_total <- rbind(df_total, DataSQL)
}
cols <- c(2:5)
df_total[cols] <- lapply(df_total[cols], formatC, big.mark = ",", decimal.mark =".", format = "f", digits = 2)
knitr::kable(df_total, "pipe", caption = "Table 2" )
df_total = data.frame()
for(i in 1:1){
tblname <- case_when(
i == 1 ~ "DW_Staging.acu.CDPS_anle_full",
i ==2 ~ "DW_Staging.acu.CDPS_anle_PaidOnly",
i ==3 ~ "DW_Staging.acu.CDPS_anle_NoLab",
i ==4 ~ "DW_Staging.acu.CDPS_anle_PaidNoLab",
TRUE ~ "other")
clmtp <- gsub("DW_Staging.acu.CDPS_anle_","",tblname)
sqltxt <- paste0("select
Bucket = case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end,
Score_anle = sum(a.RawScore), Score_Mllmn = sum(b.RawScore),
ScoreDiff = sum(a.RawScore - b.RawScore), MM = count(*)
from ", tblname, " as a
inner join dw_staging.acu.cdps_allcin_202201 as b
on a.Recipient_ID = b.MemberCIN
group by case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end;")
DataSQL <- sqlQuery(conn,sqltxt);
DataSQL <- cbind(ClaimType = clmtp, DataSQL)
df_total <- rbind(df_total, DataSQL)
}
cols <- c(2:5)
df_total[cols] <- lapply(df_total[cols], formatC, big.mark = ",", decimal.mark =".", format = "f", digits = 2)
knitr::kable(df_total, "pipe", caption = "Table 2" )
df_total = data.frame()
for(i in 1:1){
tblname <- case_when(
i == 1 ~ "DW_Staging.acu.CDPS_anle_full",
i ==2 ~ "DW_Staging.acu.CDPS_anle_PaidOnly",
i ==3 ~ "DW_Staging.acu.CDPS_anle_NoLab",
i ==4 ~ "DW_Staging.acu.CDPS_anle_PaidNoLab",
TRUE ~ "other")
clmtp <- gsub("DW_Staging.acu.CDPS_anle_","",tblname)
sqltxt <- paste0("select
Bucket = case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end,
Score_anle = sum(a.RawScore), Score_Mllmn = sum(b.RawScore),
ScoreDiff = sum(a.RawScore - b.RawScore), MM = count(*)
from ", tblname, " as a
inner join dw_staging.acu.cdps_allcin_202201 as b
on a.Recipient_ID = b.MemberCIN
group by case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end;")
DataSQL <- sqlQuery(conn,sqltxt);
DataSQL <- cbind(ClaimType = clmtp, DataSQL)
df_total <- rbind(df_total, DataSQL)
}
cols <- c(3:6)
df_total[cols] <- lapply(df_total[cols], formatC, big.mark = ",", decimal.mark =".", format = "f", digits = 2)
knitr::kable(df_total, "pipe", caption = "Table 2" )
df_total$MM <- format(df_total$MM, big.mark = ",", digits = 0)
knitr::kable(df_total, "pipe", caption = "Table 2" )
df_total$MM <- formatC(df_total$MM, big.mark = ",", digits = 0)
knitr::kable(df_total, "pipe", caption = "Table 2" )
df_total = data.frame()
for(i in 1:4){
tblname <- case_when(
i == 1 ~ "DW_Staging.acu.CDPS_anle_full",
i ==2 ~ "DW_Staging.acu.CDPS_anle_PaidOnly",
i ==3 ~ "DW_Staging.acu.CDPS_anle_NoLab",
i ==4 ~ "DW_Staging.acu.CDPS_anle_PaidNoLab",
TRUE ~ "other")
clmtp <- gsub("DW_Staging.acu.CDPS_anle_","",tblname)
sqltxt <- paste0("select
Bucket = case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end,
Score_anle = sum(a.RawScore), Score_Mllmn = sum(b.RawScore),
ScoreDiff = sum(a.RawScore - b.RawScore), MM = count(*)
from ", tblname, " as a
inner join dw_staging.acu.cdps_allcin_202201 as b
on a.Recipient_ID = b.MemberCIN
group by case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end;")
DataSQL <- sqlQuery(conn,sqltxt);
DataSQL <- cbind(ClaimType = clmtp, DataSQL)
df_total <- rbind(df_total, DataSQL)
}
cols <- c(3:6)
df_total[cols] <- lapply(df_total[cols], formatC, big.mark = ",", decimal.mark =".", format = "f", digits = 2)
df_total$MM <- formatC(df_total$MM, big.mark = ",",format = "f", digits = 0)
knitr::kable(df_total, "pipe", caption = "Table 2" )
df_total[6] <- lapply(df_total[6], formatC, big.mark = ",", decimal.mark =".", format = "f", digits = 0)
knitr::kable(df_total, "pipe", caption = "Table 2" )
df_total = data.frame()
for(i in 1:4){
tblname <- case_when(
i == 1 ~ "DW_Staging.acu.CDPS_anle_full",
i ==2 ~ "DW_Staging.acu.CDPS_anle_PaidOnly",
i ==3 ~ "DW_Staging.acu.CDPS_anle_NoLab",
i ==4 ~ "DW_Staging.acu.CDPS_anle_PaidNoLab",
TRUE ~ "other")
clmtp <- gsub("DW_Staging.acu.CDPS_anle_","",tblname)
sqltxt <- paste0("select
Bucket = case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end,
Score_anle = sum(a.RawScore), Score_Mllmn = sum(b.RawScore),
ScoreDiff = sum(a.RawScore - b.RawScore), MM = count(*)
from ", tblname, " as a
inner join dw_staging.acu.cdps_allcin_202201 as b
on a.Recipient_ID = b.MemberCIN
group by case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end;")
DataSQL <- sqlQuery(conn,sqltxt);
DataSQL <- cbind(ClaimType = clmtp, DataSQL)
df_total <- rbind(df_total, DataSQL)
}
cols <- c(3:6)
df_total[cols] <- lapply(df_total[cols], formatC, big.mark = ",", decimal.mark =".", format = "f", digits = 2)
df_total[6] <- lapply(df_total[6], formatC, big.mark = ",", decimal.mark =".", format = "f", digits = 0)
knitr::kable(df_total, "pipe", caption = "Table 2" )
df_total = data.frame()
for(i in 1:4){
tblname <- case_when(
i == 1 ~ "DW_Staging.acu.CDPS_anle_full",
i ==2 ~ "DW_Staging.acu.CDPS_anle_PaidOnly",
i ==3 ~ "DW_Staging.acu.CDPS_anle_NoLab",
i ==4 ~ "DW_Staging.acu.CDPS_anle_PaidNoLab",
TRUE ~ "other")
clmtp <- gsub("DW_Staging.acu.CDPS_anle_","",tblname)
sqltxt <- paste0("select
Bucket = case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end,
Score_anle = sum(a.RawScore), Score_Mllmn = sum(b.RawScore),
ScoreDiff = sum(a.RawScore - b.RawScore), MM = count(*)
from ", tblname, " as a
inner join dw_staging.acu.cdps_allcin_202201 as b
on a.Recipient_ID = b.MemberCIN
group by case when (a.RawScore - b.RawScore) > 0.01 then 'Higher'
when (a.RawScore - b.RawScore) < -0.01 then 'Lower'
else 'Same' end;")
DataSQL <- sqlQuery(conn,sqltxt);
DataSQL <- cbind(ClaimType = clmtp, DataSQL)
df_total <- rbind(df_total, DataSQL)
}
cols <- c(3:5)
df_total[cols] <- lapply(df_total[cols], formatC, big.mark = ",", decimal.mark =".", format = "f", digits = 2)
df_total[6] <- lapply(df_total[6], formatC, big.mark = ",", decimal.mark =".", format = "f", digits = 0)
knitr::kable(df_total, "pipe", caption = "Table 2" )
library(tidyverse)
library(dslabs)
data(gapminder)
tidy_data <- gapminder %>%
filter(country %in% c('South Korea','Germany')) %>%
select(country, year, fertility)
head(tidy_data)
head(gapminder)
tidy_data %>%
ggplot(aes(year,fertility,color = country)) +
geom_point()
path <- system.file("extdata", package = "dslabs")
path
filename <- filepath(path, "fertility-two-countries-example.csv")
filename <- file.path(path, "fertility-two-countries-example.csv")
wide_data <- read_csv(filename)
View(wide_data)
View(wide_data)
select(wide_date,country,'1967':'1967')
select(wide_data,country,'1967':'1967')
select(wide_data,country,'1960':'1967')
View(gapminder)
new_tidy_data <- wide_data %>%
gather(year,fertility,'1960':'2015')
head(new_tidy_data)
View(wide_data)
new_tidy_data <- wide_data %>%
gather(year,fertility,-country)
head(new_tidy_data)
class(tidy_data$year)
class(new_tidy_data$year)
new_tidy_data <- wide_data %>%
gather(year,fertility,-country, convert = TRUE)
class(new_tidy_data($year))
new_tidy_data <- wide_data %>%
gather(year,fertility,-country, convert = TRUE)
class(new_tidy_data$year)
new_tidy_data %>%
ggplot(aes(year,fertility, color = country)) +
geom_point()
View(new_tidy_data)
new_wide_data <- new_tidy_data %>% spread(year,fertility)
View(new_wide_data)
select(new_wide_data,country, '1960':'1967')
raw_dat <- read_csv(filename)
select (raw_dat, 1:5)
?select
dat <-raw_dat %>% gather(key, value, -country)
head(dat)
dat$key[1:5]
head(dat)
dat$key[1:5]
filename <- file.path(path, "life-expectancy-and-fertility-two-countries-example.csv")
raw_dat <- read_csv(filename)
select (raw_dat, 1:5)
dat <-raw_dat %>% gather(key, value, -country)
head(dat)
dat$key[1:5]
dat %>% separate(key, c("year","variable name"),"_")
dat %>% separate(key,c("year","variable name"))
dat %>% separate(key, c("year","variable name"),"_")
dat %>% separate(key,c("year","variable name"))
View(dat)
dat %>% separate(key, c("year","first_variable_name"),"second_variable_name", fill = "right")
dat %>% separate(key, c("year","first_variable_name","second_variable_name"), fill = "right")
dat %>% separate(key, c("year","variable name"),sep = "_",extra = "merge")
dat %>% separate(key, c("year","variable name"),sep = "_",extra = "merge") %>%
spread(variable_name,value)
dat %>% separate(key, c("year","variable_name"),sep = "_",extra = "merge") %>%
spread(variable_name,value)
dat %>% separate(key, c("year","first_variable_name","second_variable_name"), fill = "right") %>%
unite(variable_name, first_variable_name, second_variable_name)
dat %>% separate(key, c("year","first_variable_name","second_variable_name"), fill = "right") %>%
unite(variable_name, first_variable_name, second_variable_name, sep = "_")
dat %>% separate(key, c("year","variable_name"),sep = "_",extra = "merge") %>%
spread(variable_name,value)
dat %>% separate(key, c("year","first_variable_name","second_variable_name"), fill = "right") %>%
unite(variable_name, first_variable_name, second_variable_name, sep = "_")  %>%
spread(variable_name,value) %>%
rename(fertility = fertility_NA)
View(new_tidy_data)
View(wide_data)
co2
co2_wide <- data.frame(matrix(co2,ncol =12, byrow = TRUE))
View(co2_wide)
co2_wide <- data.frame(matrix(co2,ncol =12, byrow = TRUE)) %>%
setNames(1:12)
co2_wide <- data.frame(matrix(co2,ncol =12, byrow = TRUE)) %>%
setNames(1:12) %>%
mutate(year = as.character(1959:1997))
co2_tidy <- co2_wide %>% gather(month,co2,-year)
View(co2_tidy)
class(co2_tidy$month)
str(co2_tidy)
co2_tidy %>% ggplot(aes(as.numeric(month),co2,color = year)) + geom_line()
library(dslabs)
data(admissions)
dat <-admissions %>% select(-applicants)
View(dat)
spread(dat, gender, admitted)
dat_tidy <- spread(dat, gender, admitted)
View(dat_tidy)
View(admissions)
tmp <- gather(admissions, key, value, admitted:applicants)
View(tmp)
tmp2 <- unite(tmp, column_name, c(key,gender))
View(tmp2)
spread(tmp2,column_name, value)
library(tidyverse)
library(ggrepel)
install.packages("ggrepel")
library(tidyverse)
library(ggrepel)
library(dslabs)
ds_theme_set()
data(murders)
head(murders))
library(tidyverse)
library(ggrepel)
library(dslabs)
ds_theme_set()
data(murders)
head(murders)
data("polls_us_election_2016")
remove(list = ls())
library(tidyverse)
library(ggrepel)
library(dslabs)
ds_theme_set()
data(murders)
head(murders)
data("polls_us_election_2016")
head(results_us_election_2016)
identical(results_us_election_2016$state,murders$state)
tab %>% left_join(murders,results_us_election_2016, by = "state")
tab <- left_join(murders,results_us_election_2016, by = "state")
head(tab)
tab %>% ggplot(aes(population/10^6,electoral_votes, label = abb))+
geom_point()
tab %>% ggplot(aes(population/10^6,electoral_votes, label = abb))+
geom_point() +
geom_text_repel()
tab %>% ggplot(aes(population/10^6,electoral_votes, label = abb))+
geom_point()
tab %>% ggplot(aes(population/10^6,electoral_votes, label = abb))+
geom_point() +
geom_text_repel() +
scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2") +
geom_smooth(method = "lm", se = FALSE)
bind_cols(a = 1:3, b = 4:6)
tab1 <- tab[, 1:3]
tab2 <- tab[, 4:6]
tab3 <- tab[, 7:9]
new_tab <- bind_cols(tab1, tab2, tab3)
head(new_tab)
tab1 <- tab[1:2,]
tab2 <- tab[3:4,]
bind_rows(tab1, tab2)
# intersect vectors or data frames
intersect(1:10, 6:15)
intersect(c("a","b","c"), c("b","c","d"))
tab1 <- tab[1:5,]
tab2 <- tab[3:7,]
intersect(tab1, tab2)
# perform a union of vectors or data frames
union(1:10, 6:15)
union(c("a","b","c"), c("b","c","d"))
tab1 <- tab[1:5,]
tab2 <- tab[3:7,]
union(tab1, tab2)
# set difference of vectors or data frames
setdiff(1:10, 6:15)
setdiff(6:15, 1:10)
tab1 <- tab[1:5,]
tab2 <- tab[3:7,]
setdiff(tab1, tab2)
# setequal determines whether sets have the same elements, regardless of order
setequal(1:5, 1:6)
setequal(1:5, 5:1)
setequal(tab1, tab2)
tab1
tab2
head(tab1)
head(tab2)
left_join(tab1,tab2, by ="state")
library(Lahman)
install.packages("Lahman")
Batting %>%
filter(yearID == 2016) %>%
arrange(desc(HR))
library(Lahman)
Batting %>%
filter(yearID == 2016) %>%
arrange(desc(HR))
Batting %>%
filter(yearID == 2016) %>%
arrange(desc(HR)) %>%
slice(1:10)
top <- Batting %>%
filter(yearID == 2016) %>%
arrange(desc(HR)) %>%    # arrange by descending HR count
slice(1:10)    # take entries 1-10
top %>% as_tibble()
Master %>% as_tibble()
View(top)
top_names <- top %>% left_join(Master, by ="playerID") %>%
select(playerID, nameFirst, nameLast, HR)
View(top_names)
head(Salaries)
head(Salaries)
head(top_names)
top_salary <- Salaries %>% filter(yearID == 2016) %>%
right_join(top_names) %>%
select(nameFirst, nameLast, teamID, HR, salary)
View(top_salary)
head(AwardsPlayers)
AwardsPlayers %>% filter(yearID == 2016)
AwardsPlayers %>% filter(yearID == 2016) %>%
intersect(playeID,top_names$playerID)
AwardsPlayers %>% filter(yearID == 2016) %>%
intersect(playerID,top_names$playerID)
AwardsPlayers %>% filter(yearID == 2016) %>%
intersect($playerID,top_names$playerID)
dat <- AwardsPlayers %>% filter(yearID == 2016)
intersect(dat$playerID,top_names$playerID)
setdiff(dat$playerID,top_names$playerID)
dim(setdiff(dat$playerID,top_names$playerID))
nrow(setdiff(dat$playerID,top_names$playerID))
length(setdiff(dat$playerID,top_names$playerID))
library(rvest)
installed.packages("rvest")
library(rvest)
library(rvest)
url <- "https://en.wikipedia.org/wiki/Murder_in_the_United_States_by_state"
h <- read_html(url)
View(h)
class(h)
h
tab<- h %>% html_nodes("table")
View(tab)
View(tab)
tab[[2]]
tab <- tab %>% html_table
View(tab)
class(tab)
tab %>% setNames(c("state", "population", "total", "murders", "gun_murders", "gun_ownership", "total_rate", "murder_rate", "gun_murder_rate"))
tab<- h %>% html_nodes("table")
tab[[2]]
tab <- tab[[2]] %>% html_table
class(tab)
tab <- tab %>% setNames(c("state", "population", "total", "murders", "gun_murders", "gun_ownership", "total_rate", "murder_rate", "gun_murder_rate"))
head(tab)
